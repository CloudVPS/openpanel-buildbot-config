# -*- python -*-
# ex: set syntax=python:

import time 
from buildbot import manhole
from buildbot.buildslave import BuildSlave
from buildbot.changes.filter import ChangeFilter
from buildbot.config import BuilderConfig
from buildbot.interfaces import IProperties
from buildbot.process import buildstep, factory, properties
from buildbot.process.buildstep import LoggingBuildStep, BuildStep, RemoteShellCommand
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property, Properties, WithProperties
from buildbot.schedulers import timed
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.status import html
from buildbot.status import results 
from buildbot.status.html import WebStatus
from buildbot.status.web import authz
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.source import Mercurial
from buildbot.steps.transfer import FileUpload, DirectoryUpload

import commands
import os


# A custom buildstep which can set some buildproperties
class Properties(BuildStep):
    def __init__(self, properties={}, **kwargs):
        BuildStep.__init__(self, **kwargs)

        self.set_properties = properties

        self.addFactoryArguments(properties=properties)

    def start(self):
        for k,v in self.set_properties.items():
            # if property is callable, call it to get the actual value
            if hasattr(v,'__call__'): 
                v = v(self)
            elif hasattr(v,'getRenderingFor'): 
                v = v.getRenderingFor(self)

            self.setProperty(k, v, "PropertySetter")

        self.finished(0)

repositories = {'dev': '/srv/repository', 'stable': '/srv/repository-stable'}

# This checks/creates an empty Debian repo based on settings in /srv/repository/conf
# everytime buildbot rebuilds it's config. 
# If the repo is not there, the build will fail. 
# However, if this command runs every build, some build somewhere will fail due to
# lockfiles.

for repo in repositories:
    commands.getoutput('reprepro -b %s export' % repo)


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Set global and default Build Properties here.
c['properties'] = {
    'tag' : 'default',
}

c['builders'] = []


####### BUILDSLAVES
c['slaves'] = [
    BuildSlave("debian6-amd64", "pass", max_builds=1), 
    BuildSlave("centos5-slave", "pass", max_builds=1), 
    BuildSlave("postprocess-slave", "pass", max_builds=1),  # -- See comment at
                                                            #    slave definition.
]

# Port slaves will connect to:
c['slavePortnum'] = 9989

# Set global env variables to be used in buildsteps here.
# (Remember to use env=env when using shellcommands!)
env={'DEBFULLNAME': 'OpenPanel packager', 'DEBEMAIL': 'packages@openpanel.com'}

# This is a dictionary of distribution specific attributes needed to config,
# make, make install using distro specific tools and settings. 
# Fragmentation is a joy!
distrodict = {
            "debian": {
                "pkg": "deb",
                "version": {
                    "6": "squeeze",
                    },
                "architectures": [
                        "amd64", 
                        "i386",
                    ],
                },
            "ubuntu": {
                "pkg": "deb",
                "version": {
                    "10.04": "lucid",
                    "11.04": "natty",
                    },
                "architectures": [
                        "amd64", 
                        "i386",
                    ],
                },
            "centos": {
                "pkg": "rpm",
                "version": {
                    "5": "centos5",
                    },
                "architectures": [
                        "x86_64", 
                        "i386",
                    ],
                },
            }
    
# Create a list of components, 
# with lists of supported distros (pkging methods, really). 
# Each component corresponds with an hg repo on hg.openpanel.com.
# The order in which these components are listed here is the order in which
# a Builder will build them. 
all_components=[
    ['grace', ["deb", "rpm"]],
    ['opencore', ["deb", ]],
    ['opencore-ssl', ["deb", ]],
    ['opencli', ["deb", ]],
    ['authd', ["deb"]],
    ['openpanel-gui', ["deb"]],
    ['validatepem', ["deb"]],
    ['vacationdrop', ["deb"]],
    ['swupd', ["deb"]],
    ['logax', ["deb"]],
    ['limadaemon', ["deb"]],
    ['coreval', ["deb"]],
    ['coreunreg', ["deb"]],
    ['User.module', ["deb"]],
    ['Stub.module', ["deb"]],
    ['SpamAssassin.module', ["deb"]],
    ['SoftwareUpdate.module', ["deb"]],
    ['SSH.module', ["deb"]],
    ['Pptpd.module', ["deb"]],
    ['PostfixCourier.module', ["deb"]],
    ['Networking.module', ["deb"]],
    ['MySQL.module', ["deb"]],
    ['Keepalived.module', ["deb"]],
    ['IPTables.module', ["deb"]],
    ['FTP.module', ["deb"]],
    ['Domain.module', ["deb"]],
    ['DNSDomain.module', ["deb"]],
    ['ApacheForward.module', ["deb"]],
    ['Apache2.module', ["deb"]],
    ['Amavis.module', ["deb"]],
    ['AWStats.module', ["deb"]],
    ['openapp/openpanel-openapp-pureftpd-auth', ["deb"]],
    ['openapp/openpanel-openapp-mysql-artwork', ["deb"]],
    ['openapp/openpanel-openapp-mod-wordpress', ["deb"]],
    ['openapp/openpanel-openapp-mod-user', ["deb"]],
    ['openapp/openpanel-openapp-mod-smtp', ["deb"]],
    ['openapp/openpanel-openapp-mod-ruby', ["deb"]],
    ['openapp/openpanel-openapp-mod-mysql', ["deb"]],
    ['openapp/openpanel-openapp-mod-joomla', ["deb"]],
    ['openapp/openpanel-openapp-mod-drupal', ["deb"]],
    ['openapp/openpanel-openapp-mod-cron-apt', ["deb"]],
    ['openapp/openpanel-openapp-mod-backup', ["deb"]],
    ['openapp/openpanel-openapp-mod-apache2', ["deb"]],
    ['openapp/openpanel-openapp-gui', ["deb"]],
    ['openapp/openpanel-openapp-call', ["deb"]],
    ['openapp/openapp-xtrabackup', ["deb"]],
    ['openapp/openapp-wordpress-installer', ["deb"]],
    ['openapp/openapp-tuning', ["deb"]],
    ['openapp/openapp-tomcat', ["deb"]],
    ['openapp/openapp-symfony', ["deb"]],
    ['openapp/openapp-ruby', ["deb"]],
    ['openapp/openapp-phpmyadmin-installer', ["deb"]],
    ['openapp/openapp-mysql', ["deb"]],
    ['openapp/openapp-lamp', ["deb"]],
    ['openapp/openapp-joomla-installer', ["deb"]],
    ['openapp/openapp-drupal', ["deb"]],
    ['openapp/openapp-backup', ["deb"]],
    ['openapp/openapp-awstats', ["deb"]],
]

base_repo='/var/www/openpanel'
    
def PostProcess(distro):
    
    '''
        This factory is used for buildsteps (mostly on the master) that publish
        the build results to where ever you need. 

        The idea of doing this in a seperate factory instead of the generic one
        is that it should allow for more flexibility. If not, then this can be
        dropped and added to the main factory.

        In it's current form, it's only added value is that doing it this way,
        we make use of buildbots queueing. Thus there shouldn't be more than 1
        rsync at a time.
    
        Currently there are only steps for Debian/Ubuntu as it includes the
        publishing of the .deb files to the public repository.
    
    '''

    f = BuildFactory()
    f.addSteps([
        MasterShellCommand(command=['/home/buildmaster/buildbot-config/bin/synctobob.py',], env=env),
    ])
    return f
    
def make_factory(distro, distroversion, archs, component, tag):
    '''
        This function does the brunt of the work. It is to be called after the
        logic has been determined what component to build. 

        In other words this makes: 
            one component
            for one distro
            for one distroversion
            on one arch
            of one hg tag

    '''

    f = BuildFactory()

    lsbdistcodename = distrodict[distro]["version"][distroversion]

    # Look up in a dictionary if we're going to build RPMs or DEBs
    pkg_method = distrodict[distro]["pkg"]

    local_repo = "%s/%s" % (base_repo,lsbdistcodename)

    # Generic steps:
    f.addSteps([
        # Copy local variables to Properties. 
        Properties({
                'lsbdistcodename':  lsbdistcodename,
                'distro':           distro,
                'distroversion':    distroversion,
                'component':        component,
                'hgrepo':           "http://hg.openpanel.com/%s/" % component,
                'deb_aptrepo':      'deb http://141.138.195.13/openpanel/%s/dev ./' % lsbdistcodename,
                'incoming_dir':     local_repo + '/dev',
                'sourcedir':        WithProperties('%(workdir)s/build'),
                'resultdir':        WithProperties('%(workdir)s/result'),
            },
            name="General properties"
        ),

        Properties({
                # The versioning is dependent on whether this is a release or a
                # nightly build. We use the BuildProperty 'tag' to determine if
                # something is a release or a nightly. 
                'deb_aptrepo':      'deb http://141.138.195.13/openpanel/%s/stable ./' % lsbdistcodename,
                'incoming_dir':     local_repo + '/stable',
            }, 
            doStepIf=lambda step: step.getProperty('release') == 'true',
            name="Release-specific overrides"
        ),

        RemoveDirectory(WithProperties("%(workdir)s")), 
        ShellCommand(
            command=["mkdir", "-p", WithProperties('%(resultdir)s')],
            name="Ensure build dir exists"),

        # create location on the master to receive the required data
        MasterShellCommand(
            command=["mkdir", "-p", WithProperties('%(incoming_dir)s')],
            name="Ensure incoming dir exists"),

        ShellCommand(
            command=WithProperties('hg clone %(hgrepo)s %(sourcedir)s -r %(tag)s'),
            name='Clone mercurial repository'
        ),

        # Determine package version       
        SetProperty(
            command=['hg','log','-r.','--template={latesttag}.{latesttagdistance}'], 
            property='version',
            name='Determine version',
            workdir=WithProperties("%(sourcedir)s")
        ),

        Properties({
                'version': lambda b: b.getProperty('version').replace('null','0.0.0')
            },
            name='Reformat version'
        ), 
        
        # Place version in version.id
        ShellCommand(
            command=WithProperties('echo %(version)s > %(sourcedir)s/version.id'),
            name='Store version in version.id'
        ),
    ])

    # Packaging method dependent steps:
    if pkg_method == "deb":
        if distro == 'ubuntu':
            f.addStep(Properties({
                "dist_mirror": "http://ftp.ubuntu.com/ubuntu",
                "dist_components": "main restricted universe multiverse",
            }))
        elif distro == 'debian':
            f.addStep(Properties({
                "dist_mirror": "http://ftp.nl.debian.org/debian",
                "dist_components": "main contrib non-free",
            }))

        f.addSteps([
    
            SetProperty(
                command=WithProperties("grep -h '^Architecture: ' '%(sourcedir)s/debian/control' | cut -f2 -d':' | sort -u | xargs echo ''"),
                property="architectures",
                name="Determine appropriate architectures to build for"
            ),

            # Place the version in debian's changelog
            ShellCommand(
                command=['debchange', 
                    '--force-bad-version', 
                    '--newversion', WithProperties('%(version)s'), 
                    'autogenerated', 
                    '--force-distribution', 
                    '--distribution', lsbdistcodename],
                env=env,
                workdir=WithProperties('%(sourcedir)s'),
                name='Store version in package'
            ),

            ShellCommand(
                command=['dpkg-buildpackage', '-us', '-uc', '-d', '-S', '-sa', '-i', '-I'],
                workdir=WithProperties('%(sourcedir)s'),
                name='Build source package'
            ),
        ])

        firstarch=True
        for arch in archs:
            f.addStep(ShellCommand(
                command=WithProperties(
                    'pbuilder ' +
                        '--build ' +
                        ('--distribution %s ' % lsbdistcodename) + 
                        '--override-config ' +
                        '--mirror "%(dist_mirror)s" ' +
                        '--components "%(dist_components)s" ' +
                        '--othermirror "%(deb_aptrepo)s" ' +
                        '--aptcache "" ' +
                        '--hookdir /srv/hook ' +
                        ('--basetgz /var/cache/pbuilder/%s-%s.tgz ' % (lsbdistcodename,arch) ) +
                        '--buildresult %(resultdir)s/ ' +
                        '%(workdir)s/*.dsc'),
                name=("Build for %s" % arch),
                doStepIf=firstarch or (lambda step: (arch in step.getProperty('architectures')) or ('any' in step.getProperty('architectures'))),
            ))
            firstarch=False

        f.addSteps([
            # Upload all components to one folder that will get pushed to
            # the repository in one go. 
            DirectoryUpload(
                slavesrc=WithProperties("%(resultdir)s"), 
                masterdest=WithProperties("%(incoming_dir)s")),

            MasterShellCommand(
                command=WithProperties(
                    'cd %(incoming_dir)s &&'
                    'dpkg-scanpackages -m . /dev/null | gzip -9c >Packages.gz && '
                    'find . -type d -perm 700 -exec chmod 755 {} \; &&'
                    'find . -type f -perm 600 -exec chmod 644 {} \;'
                ),
                name="Build apt repository",
            ),
        ])

    # steps for building RPMs:
    if pkg_method is "rpm":
        f.addSteps([
            # We need the .spec name to feed to the mock --buildsrpm later on...
            # This assumes that there is only ONE spec file, or else it will simply
            # ignore the some spec files.
            SetProperty(
                command=WithProperties("find %(sourcedir)s/rpm/ -name '*.spec' | head -n 1"),  
                property="spec_name",
                name="Find spec file"),

            SetProperty(
                command=WithProperties("grep '^Name:' '%(spec_name)s' | cut -d ':' -f 2"),  
                property="rpm_name",
                name="Determine rpm name"),

            ShellCommand(
                command=[
                    "sed", 
                    "-i", WithProperties(r"s/\(%%define\sversion\|Version:\)\s\+.*$/\1 %(version)s/"), 
                    WithProperties("%(spec_name)s")],
                name="Update specfile with version",
            ),

            ShellCommand(
                command=['hg', 'archive', '-ttbz2', WithProperties("%(workdir)s/%(rpm_name)s-%(version)s.tar.bz2")],
                workdir=WithProperties('%(sourcedir)s'),
                name="Create source archive"                
            ),

            # Have mock build a SRPM
            ShellCommand(command=[
                    'mock', 
                    '--buildsrpm',
                    WithProperties('--spec=%(spec_name)s'),
                    WithProperties('--sources=%(workdir)s'),
                    WithProperties('--resultdir=%(resultdir)s'),
                    '-r%s-%s-%s' % (distro,distroversion,archs[0]),],
                name="Create source rpm"                
            ),
            
            SetProperty(
                command=WithProperties("find %(resultdir)s/ -name '*.src.rpm'"),  
                property="src_rpm",
                name="Determine srpm's filename"),
        ])

        for arch in archs:
            f.addStep(            # Feed SRPM to build RPM
                ShellCommand(command=['mock', 
                    '--rebuild',
                    WithProperties('%(src_rpm)s'), 
                    WithProperties('--resultdir=%(resultdir)s'),
                    '-r%s-%s-%s' % (distro,distroversion,arch),
                    ], 
                env=env,
                name="Build RPMs for %s" % arch,                
                )
            )

        f.addSteps([
            # Upload all components to one folder that will get pushed to
            # the repository in one go. 
            DirectoryUpload(
                slavesrc=WithProperties("%(resultdir)s"), 
                masterdest=WithProperties("%(incoming_dir)s")),

            MasterShellCommand(
                command=WithProperties('createrepo %(incoming_dir)s'), 
                env=env,
                name="Create yum repository"),
        ])


    # Now that we have all the steps in a factory, we can hand the factory back
    # to the Builder:
    return f


# A special builder that does postprocessing stuff
# (runs reprepro and syncs to bob.openpanel.com)
c['builders'].append(
    BuilderConfig(name="PostProcess",
    slavenames='postprocess-slave',  # <-- required parameter, even if no slave buildsteps.
    factory=PostProcess("debian")))


# This creates a builder per component, per distro/distroversion/distroarch:
for dist in distrodict:
    components = []
    # Assign slaves and a list of components based on distro:
    if dist == "debian":
        slavenames = ['debian6-amd64']
        components = [comp[0] for comp in all_components if "deb" in comp[1]]
    elif dist == "ubuntu":
        slavenames = ['debian6-amd64']
        components = [comp[0] for comp in all_components if "deb" in comp[1]]
    elif dist == "centos":
        slavenames = ['centos5-slave']
        components = [comp[0] for comp in all_components if "rpm" in comp[1]]

    # Differentiate the builders on component, distro, distro version and architecture:
    for component in components:
        for version in distrodict[dist]['version']:
            archs = distrodict[dist]['architectures']
            name = "%s_%s_%s" % (component, dist , version)
            c['builders'].append(
                BuilderConfig(name=name,
                slavenames=slavenames,
                factory=make_factory(dist, version, archs, component, 'tip')))  # <-- change 'tip' if you need a different tag to be built.

# -- SCHEDULERS
# These define when a builder is called.
# Docs: http://buildbot.net/buildbot/docs/0.8.5/manual/cfg-schedulers.html

# Start out empty:
c['schedulers'] = []

# Since we have all builders defined, we can add schedules to them.
for builder in c['builders']:
    # This enables calling builders remotely:
    # (specifically 'change_filter' does that)
    name = builder.name
    c['schedulers'].append(
        SingleBranchScheduler(
            name = name,
            change_filter = ChangeFilter(project=name),
            treeStableTimer = 1, 
            builderNames = [name],
        ),)
    # Scheduled (time based) builds:
    c['schedulers'].append(
        timed.Nightly(
            name = 'nightly_%s' % name,
            builderNames=[name],
            hour=22,
            minute=30,
            branch="",
        ),
    ),


# Users that can do stuff:
users = [('bob', 'secret-pass'), ('jill', 'super-pass')]

# What can be done by those users:
authz = Authz(auth=BasicAuth(users),
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    #PRODforceBuild = 'auth',
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

####### STATUS TARGETS

# Official comments:
# ----
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.
# ----
# Doc: http://buildbot.net/buildbot/docs/0.8.5/manual/cfg-statustargets.html

c['status'] = []

# -- This helps to enable buildbot to allow remotely triggered builds over
#    http:
c['status'].append(html.WebStatus(http_port=8010, authz=authz, 
        change_hook_dialects={
                'openpanel_hook': True,
            }
        ))

# On what port to listen for slaves:
from buildbot.changes import pb
c['changes'] = pb.PBChangeSource(port=9989)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenPanel"
c['titleURL'] = "http://openpanel.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

# Details on these settings can be found here:
#   --> http://buildbot.net/buildbot/docs/0.8.5/manual/cfg-global.html
#
c['logCompressionLimit'] = 16384
c['logCompressionMethod'] = 'gz'
c['logMaxSize'] = 1024*1024 # 1M
c['logMaxTailSize'] = 32768
c['changeHorizon'] = 200
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 40
c['buildCacheSize'] = 15

