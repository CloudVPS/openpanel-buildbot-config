# -*- python -*-
# ex: set syntax=python:

import time 

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("centos5-slave", "pass"), BuildSlave("debian6-amd64", "pass"), BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = GitPoller(
        #'git://github.com/buildbot/pyflakes.git',
        #workdir='gitpoller-workdir', branch='master',
        #pollinterval=300)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Mercurial
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.process.buildstep import LoggingBuildStep

from buildbot.status import results 



factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='copy'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

opnl_projects=["grace"]
dists=["lenny", "squeeze"]

DEBFULLNAME="OpenPanel packager"
DEBEMAIL="packages@openpanel.com"

env={'DEBFULLNAME': 'OpenPanel packager', 'DEBEMAIL': 'packages@openpanel.com'}


hgrepo = "http://hg.openpanel.com/opencore/"

# Update the repo
hgup =  Mercurial(baseURL=hgrepo, workdir="build", mode="update", env=env) # now in NewRev

# SRC_NAME
src_name = SetProperty(command="cat debian/control | grep ^Source: | sed -e 's/^Source: //'", property="src_name", env=env)

arch="amd64" # now in NewRev
architecture = SetProperty(command=["echo", "%s" % arch], property="architecture")  # now in NewRev

# TIPMOST
tipmost = SetProperty(command='hg tags | { read a; read line; tipmost=`echo "$line" | cut -f1 -d" "`; echo "$tipmost"; }', property="tipmost") # now in NewRev
foo = SetProperty(command='hg tags | { read a; read line; tipmost=`echo "$line" | cut -f1 -d" "`; echo "$tipmost"; } > version.id', property="foo")

# REVISION
rev = SetProperty(command='hg id -n | /bin/sed -e "s/+$//"', property="rev")

# FIXME : I'd like to use this, but can't see a method to apply that value to a 'Property' or use it otherwise:
#date = strftime("%Y%m%d")
#
# Instead:
date = SetProperty(command=['/bin/date', '+%Y%m%d'], property="date") # now in NewRev

# Dito with dist:
dist = SetProperty(command=['echo', '%s' % dists[0]], property="dist") # now in NewRev

#local NEWVER=$TIPMOST-$REV+$(date +%Y%m%d).${EX}+$dist
# FIXME: I'm not sure what EX is, so I'm just defaulting that to 0 for now. 
# NEWVER
newver = SetProperty(command=['echo', WithProperties('%s-%s+%s.0+%s', 'tipmost', 'rev','date','dist'), ], property="newver")

# Now that we have the version nr, we should be 
debchange = ShellCommand(command=['debchange', '--force-bad-version', '--newversion', WithProperties('%(newver)s'), 'autogenerated', '--force-distribution', '--distribution', WithProperties('%(dist)s')])

# Build source package:
dpkg_buildpackage = ShellCommand(command=['dpkg-buildpackage', '-us', '-uc', '-d', '-S', '-sa', '-i', '-I'])

# Build binary package:
pbuilder = ShellCommand(command=['pbuilder', 'build', '--basetgz', WithProperties('/var/cache/pbuilder/%(dist)s-amd64.tgz'), '--buildresult', WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s/'), WithProperties('../%(src_name)s_%(newver)s.dsc'), ])
#pbuilder = ShellCommand(command=['pbuilder', 'build', '--basetgz', WithProperties('/var/cache/pbuilder/%(dist)s-amd64.tgz'), WithProperties('../%(src_name)s_%(newver)s.dsc')])



f1 = BuildFactory()
f1.addStep(hgup) # now in class NewRev
f1.addStep(src_name) # add to NewRev
f1.addStep(tipmost) # now in class NewRev
f1.addStep(rev) # now in class NewRev
f1.addStep(date) # now in class NewRev
f1.addStep(dist) # now in class NewRev
f1.addStep(newver) # To-be-replaced by NewRev
f1.addStep(debchange)
f1.addStep(architecture)
f1.addStep(ShellCommand(command=['echo', WithProperties('%(tipmost)s > version.id')]))
f1.addStep(dpkg_buildpackage)
f1.addStep(ShellCommand(command=['pwd']))
f1.addStep(ShellCommand(command=['rm', '-rf', WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s')]))
f1.addStep(ShellCommand(command=['mkdir', WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s')]))
f1.addStep(pbuilder)


# Clean up repo before, just in case:
#f1.addStep(ShellCommand(command=['/bin/sh', '-c', 'reprepro', '-V', '-b', '/srv/repository', 'remove', WithProperties("%(dist)s \"%(src_name)s\"")]))
# Adding new files to repo

f1.addStep(ShellCommand(command=['reprepro', 
                        '-V', 
                        '--waitforlock', 
                        '12', 
                        '-b', 
                        '/srv/repository', 
                        'include', 
                        WithProperties("%(dist)s"), 
                        WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s/%(src_name)s_%(newver)s_%(architecture)s.changes')]
                        ))


# -------  Debug output for me:
f1.addStep(ShellCommand(command=['echo', 'newver:', WithProperties('%(newver)s'),]))
f1.addStep(ShellCommand(command=['echo', 'srcname:', WithProperties('%(src_name)s'),]))
f1.addStep(ShellCommand(command=['echo', 'revision:', WithProperties('%(rev)s'),]))
f1.addStep(ShellCommand(command=['echo', 'tipmost:', WithProperties('%(tipmost)s'),]))

class Datefoo(LoggingBuildStep):
    ''' 
    set the date
    takes no arguments
    '''
    
    def __init__(self, date, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        # Inside the constructor, add arg to var, making it available for the
        # rest of the function inside this class
        self.date = date
        # now add that same arg to the FactoryArgs we upstream:
        self.addFactoryArguments(date=date)

    def start(self):
        date = time.strftime("%Y%m%d")
        self.setProperty(self.date, date, "date full")
        self.finished(results.SUCCESS)


class NewRev(LoggingBuildStep):
    ''' 
    Determines a new revision based on several things.
    opnlcomp = openpanel component name (grace, opencore...)
    lsbdistcodename = LSB release name (lenny, squeeze...)
    arch = Hardware Architecture (amd64, i386...)
    '''
    
    def __init__(self, opnlcomp, lsbdistcodename, arch, **kwargs):
        ''' 
        lsbdistcodename is used by facter. Might come handy later on
        '''
        LoggingBuildStep.__init__(self, **kwargs)
        self.opnlcomp = opnlcomp
        self.arch = arch
        self.lsbdistcodename = lsbdistcodename
        self.addFactoryArguments(opnlcomp=opnlcomp, lsbdistcodename=lsbdistcodename, arch=arch)

    def start(self):
        date = time.strftime("%Y%m%d")
        opnlcomp = self.opnlcomp
        arch = self.arch
        lsbdistcodename = self.lsbdistcodename
        self.setProperty("component", opnlcomp, "OpenPanel Component")
        self.setProperty("date", date, "date full")
        self.setProperty("lsbdistcodename", lsbdistcodename, "LSB defined release name")
        self.setProperty("arch", arch, "Hardware Architecture")
        self.finished(results.SUCCESS)

        
def make_factory(opnlcomp, lsbdistcodename, arch):
    """
    Generates the BuildFactory (e.g. set of build steps) for this (branch,
    python, database) combo. The series of steps is described in the module
    docstring, above.
    """
    hgrepo = "http://hg.openpanel.com/%s/" % opnlcomp

    # Update the repo or create if it does not exist.
    hgup =  Mercurial(baseURL=hgrepo, workdir="build", mode="update", env=env)
    f = BuildFactory()
    f.addSteps([
        hgup,
        SetProperty(command='hg tags | { read a; read line; tipmost=`echo "$line" | cut -f1 -d" "`; echo "$tipmost"; }', property="tipmost"),
        NewRev(opnlcomp, lsbdistcodename, arch),
        ShellCommand(command=['echo', 'DEBUG:', WithProperties('%(component)s %(date)s %(lsbdistcodename)s %(arch)s %(tipmost)s '),])
    ])
    return f

f3 = make_factory("grace-site", "squeeze", "amd64")

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

c['builders'].append(
    BuilderConfig(name="f3",
      slavenames=["debian6-amd64"],
      factory=f3))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenPanel"
c['titleURL'] = "http://openpanel.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

