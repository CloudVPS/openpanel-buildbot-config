# -*- python -*-
# ex: set syntax=python:

import time 
from buildbot import manhole
from buildbot.config import BuilderConfig
from buildbot.buildslave import BuildSlave
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.process.properties import Properties
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.process.buildstep import LoggingBuildStep
from buildbot.process.buildstep import BuildStep
from buildbot.process.buildstep import RemoteShellCommand
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers import timed
from buildbot.changes.filter import ChangeFilter
from buildbot.status import html
from buildbot.status.web import authz
from buildbot.process import buildstep, factory, properties
from buildbot.steps.master import MasterShellCommand
from buildbot.status import results 
from buildbot.steps.transfer import FileUpload, DirectoryUpload
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
                BuildSlave("debian6-amd64", "pass"), 
                BuildSlave("centos5-slave2", "pass"), 
                ]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

# Set global variables to be used here.
# (Remember to use env=env when using shellcommands!)
env={'DEBFULLNAME': 'OpenPanel packager', 'DEBEMAIL': 'packages@openpanel.com'}


class NewRev(LoggingBuildStep):
    ''' 
        This class sets several variables that are needed later on to determine
        buildsteps and version numbers. 
    '''
    
    def __init__(self, component, distro, distroversion, lsbdistcodename, arch, src_name, tipmost, **kwargs):
        ''' 
        In the previous CI, $dist was used. lsbdistcodename is used by
        puppet/facter, which could become handy at some point in the future. Hence.
        '''
        LoggingBuildStep.__init__(self, **kwargs)
        self.component = component
        self.arch = arch
        self.lsbdistcodename = lsbdistcodename
        self.distro = distro
        self.distroversion = distroversion
        self.src_name = src_name
        self.tipmost = tipmost
        self.addFactoryArguments(src_name=src_name, 
            tipmost=tipmost, 
            component=component, 
            distro=distro, 
            distroversion=distroversion, 
            lsbdistcodename=lsbdistcodename, 
            arch=arch)

    def start(self):
        date = time.strftime("%Y%m%d")
        component = self.component
        arch = self.arch
        distro = self.distro
        distroversion = self.distroversion
        lsbdistcodename = self.lsbdistcodename

        self.setProperty("distro", distro, "Linux Distribution Name")
        self.setProperty("distroversion", distroversion, "Distribution Version")
        self.setProperty("component", component, "OpenPanel Component")
        self.setProperty("date", date, "date full")
        self.setProperty("lsbdistcodename", lsbdistcodename, "LSB defined release name")
        self.setProperty("arch", arch, "Hardware Architecture")
        self.finished(results.SUCCESS)



# This is a dictionary of distribution specific attributes needed to config,
# make, make install using distro specific tools and settings. 
# Fragmentation is a joy!
distrodict = {
            "debian": {
                "pkg": "deb",
                "version": {
                    "4": "etch",
                    "5": "lenny",
                    "6": "squeeze",
                    "7": "wheezy",
                    },
                "architectures": [
                        "amd64", 
                        "i386",
                    ],
                },
            "ubuntu": {
                "pkg": "deb",
                "version": {
                    "6.06": "dapper",
                    "8.04": "hardy",
                    "9.10": "hardy",
                    "10.04": "lucid",
                    "10.10": "maverick",
                    "11.04": "natty",
                    "12.04": "precise",
                    },
                "architectures": [
                        "amd64", 
                        "i386",
                    ],
                },
            "centos": {
                "pkg": "rpm",
                "version": {
                    "5": "centos5",
                    },
                "architectures": [
                        "x86_64", 
                        "i386",
                    ],
                },
            }

    
        
def make_factory(component, distro, distroversion, arch):
    """
    Generates the BuildFactory (e.g. set of build steps) for this (branch,
    python, database) combo. The series of steps is described in the module
    docstring, above.
    """

    lsbdistcodename=distrodict[distro]["version"][distroversion]

    hgrepo = "http://hg.openpanel.com/%s/" % component

    # Update the repo or create if it does not exist.
    hgup =  Mercurial(baseURL=hgrepo, 
                                workdir="build", 
                                mode="update", 
                                env=env,
                                )
    

    # REVISION
    rev = SetProperty(command='hg id -n | /bin/sed -e "s/+$//"', property="rev")

    # --- RPM SPECIFIC (RHEL, Centos, ...)

    # We need the .spec name to feed to the mock --buildsrpm later on...
    set_spec_name = SetProperty(command='/bin/sh -c "ls rpm/*.spec | head -n 1"',  property="spec_name")

    pwd = SetProperty(command='pwd',  property="pwd")

    #Bah.
    copy_folder = ShellCommand(command=['cp', 
                                        '-a', 
                                        '.', 
                                        WithProperties("../%(rpm_name)s-%(rpm_version)s"),])

    # This assumes that there is only ONE spec file!
    set_rpm_name = SetProperty(command='/bin/sh -c "grep ^Name: rpm/*.spec | xargs | cut -d \":\" -f 2 "',  property="rpm_name")

    set_rpm_version = SetProperty(command='/bin/sh -c "grep ^Version: rpm/*.spec | xargs | cut -d \":\" -f 2 "',  property="rpm_version")

    set_rpm_repopath = SetProperty(command=['echo', WithProperties("/srv/repository/yum/dev/%(distro)s/%(distroversion)s/%(arch)s/RPMS/"),], property="rpm_repopath")

    # Officially decided that we will be using bzip2, not gzip. Any .spec
    # referring to gz files should fail.
    rpm_tbz = ShellCommand(command=['tar', 
                                'jcf',
                                WithProperties('../%(rpm_name)s-%(rpm_version)s.tar.bz2'), 
                                WithProperties('../%(rpm_name)s-%(rpm_version)s'), 
                                ])

    # Have mock build a SRPM
    rpm_mock_buildsrpm = ShellCommand(command=['mock', 
                                '--buildsrpm',
                                WithProperties('--spec=%(spec_name)s'),
                                WithProperties('--sources=%(pwd)s/../'),
                                WithProperties('--resultdir=%(pwd)s/../'),
                                WithProperties('-r%(distro)s-%(distroversion)s-%(arch)s'),
                                ])

    # Fetch the name of the srpm:
    get_src_rpm_name = SetProperty(command='/bin/sh -c "ls ../ | grep .src.rpm"',  property="src_rpm")

    # Feed SRPM to build RPM
    rpm_mock_rebuild = ShellCommand(command=['mock', 
                                '--rebuild',
                                WithProperties('../%(src_rpm)s'), 
                                WithProperties('--resultdir=/srv/repository/yum/dev/%(distro)s/%(distroversion)s/%(arch)s/RPMS/'),
                                '-r',
                                WithProperties('%(distro)s-%(distroversion)s-%(arch)s'),
                                ], env=env)

    rpm_master_mkdir = MasterShellCommand(command=["mkdir", 
                                "-p", 
                                WithProperties('%(rpm_repopath)s'),
                                ],
                                )
            
    rpm_mock_rebuild = ShellCommand(command=['mock', 
                                '--rebuild',
                                WithProperties('../%(src_rpm)s'), 
                                WithProperties('--resultdir=/srv/repository/yum/dev/%(distro)s/%(distroversion)s/%(arch)s/RPMS/'),
                                '-r',
                                WithProperties('%(distro)s-%(distroversion)s-%(arch)s'),
                                ], env=env)

    # Clean up the mock env
    rpm_mock_clean = ShellCommand(command=['mock', 
                                '--clean',
                                WithProperties('-r%(distro)s-%(distroversion)s-%(arch)s'),
                                ])


    # Createrepo on master
    rpm_master_createrepo = MasterShellCommand(command=['createrepo', 
                                WithProperties('%(rpm_repopath)s/'),
                                ], env=env)

    # ---

    # I would really really like to set 'tipmost' and 'src_name'from the
    # class NewRev,
    # but can't wrap my head around the correct code. 
    # I do not understand how I can use a buildstep (SetProperty) inside my
    # own buildstep.
    tipmost = SetProperty(command='hg tags | { read a; read line; tipmost=`echo "$line" | cut -f1 -d" "`; echo "$tipmost"; }', property="tipmost") 


    # --- DEBIAN SPECIFIC

    # Get the name of the source package
    src_name = SetProperty(command="cat debian/control | grep ^Source: | sed -e 's/^Source: //'", 
                            property="src_name", 
                            env=env,
                            )

    # FIXME
    # https://vrws.nl/redmine/issues/72
    ex = SetProperty(command="echo 1", property="ex", env=env) # FIXME FIXME


    # Now that we have the version nr, we should be 
    debchange = ShellCommand(command=['debchange', 
                                '--force-bad-version', 
                                '--newversion', 
                                WithProperties('%(newver)s'), 
                                'autogenerated', 
                                '--force-distribution', 
                                '--distribution', 
                                WithProperties('%(lsbdistcodename)s')],
                                )


    # Now that we have a .dsc, we can build a source package:
    dpkg_buildpackage = ShellCommand(command=['dpkg-buildpackage', 
                                    '-us', 
                                    '-uc', 
                                    '-d', 
                                    '-S', 
                                    '-sa', 
                                    '-i', 
                                    '-I',
                                    ])

    # Now that we have a source package, we can build a binary package:
    pbuilder = ShellCommand(command=['pbuilder', 
                                    'build', 
                                    '--hookdir', 
                                    '/srv/hook', 
                                    '--basetgz', 
                                    WithProperties('/var/cache/pbuilder/%(lsbdistcodename)s-%(arch)s.tgz'), 
                                    '--buildresult', 
                                    WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s/'), 
                                    WithProperties('../%(src_name)s_%(newver)s.dsc'), 
                                    ])
    
    # --- END DEBIAN SPECIFIC

    version_id = ShellCommand(command=['/bin/bash', '-c', 'hg tags | { read a; read line; tipmost=`echo "$line" | cut -f1 -d" "`; echo "$tipmost"; } > version.id'])

    # buildbot master runs with a strict (immutable!) umask.
    repo_permission_fix = MasterShellCommand(command=[
                    '/bin/bash', '-c', ' find /srv/repository -type d -exec chmod 755 {} \;'
        ])
    repo_permission_fix_files = MasterShellCommand(command=[
                    '/bin/bash', '-c', ' find /srv/repository -type f -exec chmod 644 {} \;'
        ])

    # Look up in a dictionary if we're going to build RPMs or DEBs
    pkg_method = distrodict[distro]["pkg"]


    f = BuildFactory()
    # Generic steps:
    f.addSteps([
        hgup,
        tipmost,
        rev,
        ])
    # PKG method dependent steps:
    if pkg_method is "deb":
        f.addSteps([
            src_name,
            ex, 
            repo_permission_fix,
            repo_permission_fix_files,
            NewRev(component, distro, distroversion, lsbdistcodename, arch, src_name, tipmost),
            ShellCommand(command=['echo', 'DEBUG:', WithProperties('%(distro)s, %(distroversion)s'),]),
            # Setting newver where I should not. 
            SetProperty(command=['echo', WithProperties('%s-%s+%s.%s+%s', 'tipmost', 'rev','date', 'ex', 'lsbdistcodename'), ], property="newver"),
        
            # Clean up previous results dir if exists, just to make sure. 
            ShellCommand(command=['rm', '-rf', WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s')]),
            # Create a results folder to place the .debs in (before passing it onto
            # reprepro)
            ShellCommand(command=['mkdir', WithProperties('/var/cache/pbuilder/result/%(src_name)s_%(newver)s')]),
    
            debchange,
            version_id,
            dpkg_buildpackage, 
            pbuilder,
            # DirectoryUpload will also create the folder.
            # A per-folder upload is good as we may end up with multiple slaves
            # dropping multiple builds into this /tmp/incoming folder at some
            # point.
            DirectoryUpload(slavesrc=WithProperties("/var/cache/pbuilder/result/%(src_name)s_%(newver)s"), masterdest=WithProperties("/tmp/incoming/%(src_name)s_%(newver)s_%(arch)s")),
            
            MasterShellCommand(command=['reprepro', 
                                '-V', 
                                '--waitforlock', 
                                '12', 
                                '-b', 
                                '/srv/repository', 
                                'include', 
                                WithProperties("%(lsbdistcodename)s"), 
                                WithProperties('/tmp/incoming/%(src_name)s_%(newver)s_%(arch)s/%(src_name)s_%(newver)s_%(arch)s.changes'),],
                        ),

            # Remove the folder created by DirectoryUpload as we do not need
            # this lying around.
            MasterShellCommand(command=['rm', '-rf',
                                WithProperties('/tmp/incoming/%(src_name)s_%(newver)s_%(arch)s'),],
                        ),
            # Debug output for me:
            ShellCommand(command=['echo', 'DEBUG:', WithProperties('%(ex)s, %(src_name)s %(component)s %(date)s %(lsbdistcodename)s %(arch)s %(tipmost)s '),]),
        ])

    # steps for building RPMs:
    if pkg_method is "rpm":
        f.addSteps([
            MasterShellCommand(command=['/home/buildmaster/rpmsign.py' ,'/tmp/incoming/rpm',], env=env),
            pwd,
            tipmost,
            set_spec_name,
            set_rpm_name,
            set_rpm_version,
            copy_folder,
            NewRev(component, distro, distroversion, lsbdistcodename, arch, "", tipmost),
            set_rpm_repopath,
            rpm_master_mkdir,
            rpm_tbz, 
            rpm_mock_buildsrpm,
            get_src_rpm_name,
            rpm_mock_rebuild,
            DirectoryUpload(slavesrc=WithProperties("%(rpm_repopath)s/"), masterdest=WithProperties("%(rpm_repopath)s/")),
            # Going to upload to a tmp folder:
            DirectoryUpload(slavesrc=WithProperties("%(rpm_repopath)s/"), masterdest=WithProperties('/tmp/incoming/rpm_%(got_revision)s_%(distro)s_%(arch)s')),
            # Feeding tmp folder to rpmsign script:
            MasterShellCommand(command=['/home/buildmaster/rpmsign.py',
                                WithProperties('/tmp/incoming/rpm_%(got_revision)s_%(distro)s_%(arch)s'),],
                        ),
            MasterShellCommand(command=['rm', '-rf',
                                WithProperties('/tmp/incoming/rpm_%(src_name)s_%(newver)s_%(arch)s'),],
                        ),

            rpm_master_createrepo,
            rpm_mock_clean,
        ])
    f.addSteps([
        repo_permission_fix,
        repo_permission_fix_files,
    ])
    return f


# Create a list of components (hg repos really...):
components=[
        #'vm-image-builder',
        #'validatepem',
        #'vacationdrop',
        #'swupd',
        #'pound-sslpatched',
        'openpanel-gui',
        'opencore-ssl',
        'opencore',
        'opencli',
        #'openapp/openpanel-openapp-pureftpd-auth',
        #'openapp/openpanel-openapp-mysql-artwork',
        #'openapp/openpanel-openapp-mod-wordpress',
        #'openapp/openpanel-openapp-mod-user',
        #'openapp/openpanel-openapp-mod-smtp',
        #'openapp/openpanel-openapp-mod-ruby',
        #'openapp/openpanel-openapp-mod-mysql',
        #'openapp/openpanel-openapp-mod-joomla',
        #'openapp/openpanel-openapp-mod-drupal',
        #'openapp/openpanel-openapp-mod-cron-apt',
        #'openapp/openpanel-openapp-mod-backup',
        #'openapp/openpanel-openapp-mod-apache2',
        #'openapp/openpanel-openapp-gui',
        #'openapp/openpanel-openapp-call',
        ##'openapp/openapp-xtrabackup',
        #'openapp/openapp-wordpress-installer',
        #'openapp/openapp-tuning',
        #'openapp/openapp-tomcat',
        #'openapp/openapp-symfony',
        #'openapp/openapp-ruby',
        #'openapp/openapp-phpmyadmin-installer',
        #'openapp/openapp-mysql',
        #'openapp/openapp-lamp',
        #'openapp/openapp-joomla-installer',
        #'openapp/openapp-drupal',
        #'openapp/openapp-backup',
        #'openapp/openapp-awstats',
        'logax',
        'limadaemon',
        'grace-util',
        'grace-site',
        'grace',
        #'db4dump',
        #'coreval',
        #'coreunreg',
        #'contrib/WebApps.module',
        #'contrib/MySQLBackup.module',
        #'contrib/FolderPassword.module',
        #'buildbot-config',
        #'autobuilder',
        #'authd',
        'WebDAV.module',
        #'User.module',
        #'Stub.module',
        #'Storpel.module',
        #'SpamAssassin.module',
        #'SoftwareUpdate.module',
        #'SSH.module',
        #'Pptpd.module',
        #'PostfixCourier.module',
        #'OpenSwan.module',
        #'Networking.module',
        #'MySQL.module',
        #'LIMA.module',
        #'Keepalived.module',
        #'IPTables.module',
        #'FTP.module',
        #'Domain.module',
        #'DNSDomain.module',
        #'ApacheForward.module',
        #'Apache2.module',
        #'Amavis.module',
        #'AWStats.module',
    ]


c['builders'] = []

c['schedulers'] = []

# -- OKGO
# this should probably get refactored to start with 
# components...

for dist in distrodict:
    if dist == "debian":
        slavenames = ['debian6-amd64']
    if dist == "ubuntu":
        slavenames = ['debian6-amd64']
    if dist == "centos":
        slavenames = ['centos5-slave2']

    for version in distrodict[dist]['version']:
        for arch in distrodict[dist]['architectures']:
            for component in components:
                name = "%s_%s_%s_%s" % (component , dist , version , arch)
                foo = str(dist)
                factory = component
                # -- print("My name is: %s" % name)

                c['builders'].append(
                    BuilderConfig(name=name,
                    slavenames=slavenames,
                    factory=make_factory(factory, dist, version, arch))) #FIXME
                
                # Whenever this scheduler gets triggered, it will tell the builderNames to
                # go and do their stuff.
                # E.g. Whenever there is HG push into opencore, all Debian and CentOS
                # builders will get triggered.
                
                c['schedulers'].append(
                    SingleBranchScheduler(
                        name = name,
                        change_filter = ChangeFilter(project=name),
                        treeStableTimer = 1, 
                        builderNames = [name],
                    ),
                c['schedulers'].append(
                    timed.Nightly(name='nightly_%s' % name,
                        builderNames=[name],
                        hour=3,
                        minute=0))
                )

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

users = [('bob', 'secret-pass'), ('jill', 'super-pass')]

authz = Authz(auth=BasicAuth(users),
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    #PRODforceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)

# -- This helps to enable buildbot to allow remotely triggered builds over
#    http:
c['status'].append(html.WebStatus(http_port=8010, authz=authz, 
        change_hook_dialects={
                'base': True,
            }
        ))

from buildbot.changes import pb
c['changes'] = pb.PBChangeSource(port=9989)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenPanel"
c['titleURL'] = "http://openpanel.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

